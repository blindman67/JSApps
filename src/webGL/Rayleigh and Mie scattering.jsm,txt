#define GLSLIFY 1
#define SHADER_NAME quad.vert

attribute vec3 aPosition;

varying vec3 vPosition;

void main() {
    gl_Position = vec4(aPosition, 1.0);
    vPosition = aPosition;
}
", "#define GLSLIFY 1
#define SHADER_NAME quad.frag

precision highp float;

varying vec3 vPosition;

uniform vec3 uSunPos;

#define PI 3.141592
#define iSteps 16
#define jSteps 8

float rsi(vec3 r0, vec3 rd, float sr) {
    // Simplified ray-sphere intersection that assumes
    // the ray starts inside the sphere and that the
    // sphere is centered at the origin. Always intersects.
    float a = dot(rd, rd);
    float b = 2.0 * dot(rd, r0);
    float c = dot(r0, r0) - (sr * sr);
    return (-b + sqrt((b*b) - 4.0*a*c))/(2.0*a);
}

vec3 atmosphere(vec3 r, vec3 r0, vec3 pSun, float iSun, float rPlanet, float rAtmos, vec3 kRlh, float kMie, float shRlh, float shMie, float g) {
    // Normalize the sun and view directions.
    pSun = normalize(pSun);
    r = normalize(r);

    // Calculate the step size of the primary ray.
    float iStepSize = rsi(r0, r, rAtmos) / float(iSteps);

    // Initialize the primary ray time.
    float iTime = 0.0;

    // Initialize accumulators for Rayleight and Mie scattering.
    vec3 totalRlh = vec3(0,0,0);
    vec3 totalMie = vec3(0,0,0);

    // Initialize optical depth accumulators for the primary ray.
    float iOdRlh = 0.0;
    float iOdMie = 0.0;

    // Calculate the Rayleigh and Mie phases.
    float mu = dot(r, pSun);
    float mumu = mu * mu;
    float gg = g * g;
    float pRlh = 3.0 / (16.0 * PI) * (1.0 + mumu);
    float pMie = 3.0 / (8.0 * PI) * ((1.0 - gg) * (mumu + 1.0)) / (pow(1.0 + gg - 2.0 * mu * g, 1.5) * (2.0 + gg));

    // Sample the primary ray.
    for (int i = 0; i < iSteps; i++) {

        // Calculate the primary ray sample position.
        vec3 iPos = r0 + r * (iTime + iStepSize * 0.5);

        // Calculate the height of the sample.
        float iHeight = length(iPos) - rPlanet;

        // Calculate the optical depth of the Rayleigh and Mie scattering for this step.
        float odStepRlh = exp(-iHeight / shRlh) * iStepSize;
        float odStepMie = exp(-iHeight / shMie) * iStepSize;

        // Accumulate optical depth.
        iOdRlh += odStepRlh;
        iOdMie += odStepMie;

        // Calculate the step size of the secondary ray.
        float jStepSize = rsi(iPos, pSun, rAtmos) / float(jSteps);

        // Initialize the secondary ray time.
        float jTime = 0.0;

        // Initialize optical depth accumulators for the secondary ray.
        float jOdRlh = 0.0;
        float jOdMie = 0.0;

        // Sample the secondary ray.
        for (int j = 0; j < jSteps; j++) {

            // Calculate the secondary ray sample position.
            vec3 jPos = iPos + pSun * (jTime + jStepSize * 0.5);

            // Calculate the height of the sample.
            float jHeight = length(jPos) - rPlanet;

            // Accumulate the optical depth.
            jOdRlh += exp(-jHeight / shRlh) * jStepSize;
            jOdMie += exp(-jHeight / shMie) * jStepSize;

            // Increment the secondary ray time.
            jTime += jStepSize;
        }

        // Calculate attenuation.
        vec3 attn = exp(-(kMie * (iOdMie + jOdMie) + kRlh * (iOdRlh + jOdRlh)));

        // Accumulate scattering.
        totalRlh += odStepRlh * attn;
        totalMie += odStepMie * attn;

        // Increment the primary ray time.
        iTime += iStepSize;

    }

    // Calculate and return the final color.
    return iSun * (pRlh * kRlh * totalRlh + pMie * kMie * totalMie);
}

void main() {
    vec3 color = atmosphere(
        normalize(vPosition),           // normalized ray direction
        vec3(0,6372e3,0),               // ray origin
        uSunPos,                        // position of the sun
        22.0,                           // intensity of the sun
        6371e3,                         // radius of the planet in meters
        6471e3,                         // radius of the atmosphere in meters
        vec3(5.5e-6, 13.0e-6, 22.4e-6), // Rayleigh scattering coefficient
        21e-6,                          // Mie scattering coefficient
        8e3,                            // Rayleigh scale height
        1.2e3,                          // Mie scale height
        0.758                           // Mie preferred scattering direction
    );

    // Apply exposure.
    color = 1.0 - exp(-1.0 * color);

    gl_FragColor = vec4(color, 1);
}



canvasContainer.innerHTML = "";
var canvas;
$$(canvasContainer, canvas = $("canvas",{width: ctx.canvas.width, height: ctx.canvas.height}));
log(canvas.width)
var program, colorsLoc, modelLoc, loc, text = " interpolation. Click for ", model = "~RGB"; // or sRGB



const vertSrc = `#version 300 es
    in vec2 verts;
    out vec3 sunRay;
    void main() { 
        sunRay = vec3(verts.x * 4.0, verts.y + 0.8, 0.5);
        gl_Position = vec4(verts, 1, 1); 
    }`;
const fragSrc = `#version 300 es
    precision highp float;

    out vec4 pixel;
    in vec3 sunRay;
    uniform vec3 sunPos;
    
    #define PI8 25.132741


    #define iSteps 16
    #define jSteps 8
    // planet radius
    #define planetRadius 6371e3
    // atmosphereRadius
    #define atmosphereRadius 6478e3
    // ray altitude (as fraction atmosphere above planet)
    #define rayAltitude 0.02
    // intensity of sun
    #define sunIntensity 42.0
    
    // scatter RGB
    #define scatterRGB vec3(5.5e-6, 13.0e-6, 22.4e-6)
    // Mie scattering coefficient
    #define mScatterCoef  21e-6                         
    // Mie preferred scattering direction    
    #define mScatterDir 0.785                           
    // Mie scale height
    #define mScaleHeight 1.2e3                        
    // Rayleigh scale height
    #define rScaleHeight 8e3                            

    
    float raySphereIntersection(const vec3 r0, const vec3 rd) {
        float a = dot(rd, rd);
        float b = 2.0 * dot(rd, r0);
        float c = dot(r0, r0) - (atmosphereRadius * atmosphereRadius);
        return (-b + sqrt((b*b) - 4.0*a*c))/(2.0*a);
    }
    
    vec3 atmosphere(const vec3 ray, const vec3 pSun) {
        vec3 rOrigin = vec3(0, (atmosphereRadius - planetRadius) * rayAltitude + planetRadius, 0);
        float iStepSize = raySphereIntersection(rOrigin, ray) / float(iSteps);
        float step = 0.0;
        vec3 totalRlh = vec3(0,0,0);
        vec3 totalMie = vec3(0,0,0);
        float iOdRlh = 0.0;
        float iOdMie = 0.0;
        float mu = dot(ray, pSun);
        float mumu = 3.0 * (mu * mu + 1.0);
        const float mSD2 = mScatterDir * mScatterDir;
        float pMie = mumu * (1.0 - mSD2) / (pow(1.0 + mSD2 - 2.0 * mu * mScatterDir, 1.5) * (2.0 + mSD2));

        for (int i = 0; i < iSteps; i++) {
            vec3 iPos = rOrigin + ray * (step + iStepSize * 0.5);
            float jStepSize = raySphereIntersection(iPos, pSun) / float(jSteps);
            float jStep = 0.0;
            float jOdRlh = 0.0;
            float jOdMie = 0.0;
            for (int j = 0; j < jSteps; j++) { // Sample the secondary ray.
                float height = -(length(iPos + pSun * (jStep + jStepSize * 0.5)) - planetRadius);
                jOdRlh += exp(height / rScaleHeight);
                jOdMie += exp(height / mScaleHeight);;
                jStep += jStepSize;
            }
            float height = -(length(iPos) - planetRadius);
            float odStepRlh = exp(height / rScaleHeight) * iStepSize;
            float odStepMie = exp(height / mScaleHeight) * iStepSize;
            iOdRlh += odStepRlh;
            iOdMie += odStepMie;
            vec3 attn = exp(-(mScatterCoef * (iOdMie + jOdMie * jStepSize) + scatterRGB * (iOdRlh + jOdRlh * jStepSize))); 
            totalRlh += odStepRlh * attn;
            totalMie += odStepMie * attn;
            step += iStepSize;
        }
        return (mumu * scatterRGB * totalRlh / 2.0 + pMie * mScatterCoef * totalMie) /  PI8;

    }
    
    void main() {
        pixel = vec4(1.0 - exp(-1.0 * sunIntensity * atmosphere(normalize(sunRay), vec3(0, sunPos.yz))), 1);
        
    }`; 
    
    
const fArr = arr => new Float32Array(arr);
const colors = [64,140,190, 224,81,141, 247,223,140, 245,245,245];
const gl = canvas.getContext("webgl2", {premultipliedAlpha: false, antialias: false, alpha: false});
var sunPosLoc, sunPos = fArr([0.2,0.2,0.2]);
setup();
draw();
function compileShader(src, type, shader = gl.createShader(type)) {
    gl.shaderSource(shader, src);
    gl.compileShader(shader);
	if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {

		log.error(gl.getShaderInfoLog(shader));    
	} else {
	    log("shader complied")
	}
    return shader;
}
function setup() {
    program = gl.createProgram();
    gl.attachShader(program, compileShader(vertSrc, gl.VERTEX_SHADER));
    gl.attachShader(program, compileShader(fragSrc, gl.FRAGMENT_SHADER));
    gl.linkProgram(program);   
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint8Array([0,1,2,0,2,3]), gl.STATIC_DRAW);  
    gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
    gl.bufferData(gl.ARRAY_BUFFER, fArr([-1,-1,1,-1,1,1,-1,1]), gl.STATIC_DRAW);   
    gl.enableVertexAttribArray(loc = gl.getAttribLocation(program, "verts"));
    gl.vertexAttribPointer(loc, 2, gl.FLOAT, false, 0, 0);      
    sunPosLoc = gl.getUniformLocation(program, "sunPos");       
    gl.useProgram(program);
    gl.viewport(0, 0, canvas.width, canvas.height);
}
function draw() {


    gl.uniform3fv(sunPosLoc, sunPos);         
    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);                         
}
loop();
function loop() {
    mouse.forElement(canvas);
    var y = mouse.x / canvas.width / 2;
    var z = (mouse.y / canvas.height) * Math.PI;

    
    sunPos[0] = y ;
    sunPos[1] = Math.sin(z);
    sunPos[2] = Math.cos(z);
    draw();
    if(mouse.button === 0) { requestAnimationFrame(loop) }
    else { log("done") }
}
